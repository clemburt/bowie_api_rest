name: CI Pipeline

on:
  # Trigger the pipeline on push to any branch
  push:
    # Run on push to any branch
    branches:
      - '**'
  # Trigger the pipeline on pull requests to any branch
  pull_request:
    # Run on PRs to any branch
    branches:
      - '**'
  # Allow manual triggering of the pipeline
  workflow_dispatch:

jobs:
  build:
    name: üêã Build and push Docker Image
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Authenticate to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build the Docker image (pull base image to ensure freshness)
      - name: Build Docker image
        run: docker build --pull -t ghcr.io/clemburt/bowie_api_rest:latest .

      # Push to GHCR
      - name: Push Docker image
        run: docker push ghcr.io/clemburt/bowie_api_rest:latest

  api-rest:
    name: üñ•Ô∏è Launch API REST
    runs-on: ubuntu-latest
    # This job depends on the build job
    needs: build
    container:
      image: ghcr.io/clemburt/bowie_api_rest:latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Launch the FastAPI server in the background so subsequent steps can run tests against it
      - name: Start uvicorn in background
        run: |
          echo "Start uvicorn in background"
          pdm run uvicorn bowie_api_rest.main:app --host 0.0.0.0 --port 8000 --reload &

      # Active wait for the API to be ready by polling /health endpoint
      - name: Wait for API to be ready
        timeout-minutes: 1
        run: |
          echo "Waiting for API to be healthy on http://127.0.0.1:8000/health ..."
          until curl -s -f http://127.0.0.1:8000/health; do
            echo "API not ready yet, waiting 3 seconds..."
            sleep 3
          done
          echo "API is healthy! Proceeding with tests."

      # Run the curl tests against the API
      - name: Run API tests with curl
        run: |
          echo "‚òéÔ∏è Request sent:"
          echo "curl -s 'http://127.0.0.1:8000/tracks/Fa/albums'"
          response=$(curl -s 'http://127.0.0.1:8000/tracks/Fa/albums')
          echo "‚úâÔ∏è Response received:"
          echo $response | jq '.'

          echo "‚òéÔ∏è Request sent:"
          echo "curl -s 'http://127.0.0.1:8000/tracks/Fashion/albums'"
          response=$(curl -s 'http://127.0.0.1:8000/tracks/Fashion/albums')
          echo "‚úâÔ∏è Response received:"
          echo $response | jq '.'

          echo "‚òéÔ∏è Request sent:"
          echo "curl -s -G 'http://127.0.0.1:8000/albums/by-title/' --data-urlencode 'album_title=star'"
          response=$(curl -s -G 'http://127.0.0.1:8000/albums/by-title/' --data-urlencode 'album_title=star')
          echo "‚úâÔ∏è Response received:"
          echo $response | jq '.'

          echo "‚òéÔ∏è Request sent:"
          echo "curl -s -G 'http://127.0.0.1:8000/albums/by-title/' --data-urlencode 'album_title=scary monsters'"
          response=$(curl -s -G 'http://127.0.0.1:8000/albums/by-title/' --data-urlencode 'album_title=scary monsters')
          echo "‚úâÔ∏è Response received:"
          echo $response | jq '.'

          echo "‚òéÔ∏è Request sent:"
          echo "curl -s -G 'http://127.0.0.1:8000/albums/by-title/' --data-urlencode 'album_title=The Dark Side of the Moon'"
          response=$(curl -s -G 'http://127.0.0.1:8000/albums/by-title/' --data-urlencode 'album_title=The Dark Side of the Moon')
          echo "‚úâÔ∏è Response received (expected to be empty or 404):"
          echo $response | jq '.'

  test:
    name: üß™ Run tests
    runs-on: ubuntu-latest
    # This job depends on the build job
    needs: build
    container:
      image: ghcr.io/clemburt/bowie_api_rest:latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      - name: Run tests with PDM
        run: |
          pdm install -dG test
          pdm test

  doc:
    name: üìö Build and deploy Docs using Docker
    runs-on: ubuntu-latest
    needs: build  # This job depends on the build
    if: |
      github.ref == 'refs/heads/main' ||
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.base.ref == 'main' &&
        contains(github.event.pull_request.labels.*.name, 'documentation')
      )
    container:
      image: ghcr.io/clemburt/bowie_api_rest:latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Install git explicitly to support GitHub Pages deployment (required by peaceiris/actions-gh-pages)
      - name: Install git
        run: apk add --no-cache git

      - name: Build documentation with PDM
        run: |
          pdm install -dG doc
          pdm doc

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/build
          publish_branch: gh-pages

  lint:
    name: ü©∫ Lint source code
    runs-on: ubuntu-latest
    # This job depends on the build job
    needs: build
    container:
      image: ghcr.io/clemburt/bowie_api_rest:latest

    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      - name: Run linting with PDM
        run: |
          pdm install -dG lint
          pdm lint

  clean:
    name: üßπ Clean Docker images and containers
    runs-on: ubuntu-latest
    needs: [build, api-rest, test, doc, lint]
    # This ensures it runs even if previous jobs failed
    if: always()
    steps:
      - name: Clean up unused Docker images and containers
        run: |
          echo "Cleaning up unused Docker images and containers"
          docker system prune -af
