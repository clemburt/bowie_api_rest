name: CI Pipeline

on:
  # Trigger the pipeline on push to any branch
  push:
    # Run on push to any branch
    branches:
      - '**'
  # Trigger the pipeline on pull requests to any branch
  pull_request:
    # Run on PRs to any branch
    branches:
      - '**'
  # Allow manual triggering of the pipeline
  workflow_dispatch:

env:
  # The name of the Docker image to be pushed and used for testing
  IMAGE_NAME: ghcr.io/clemburt/bowie_api_rest:latest

jobs:
  build:
    name: üêã Build and push Docker Image
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Authenticate to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build the Docker image (pull base image to ensure freshness)
      - name: Build Docker image
        run: docker build --pull -t ${{ env.IMAGE_NAME }} .

      # Push to GHCR
      - name: Push Docker image
        run: docker push ${{ env.IMAGE_NAME }}

  api-rest:
    name: üñ•Ô∏è Launch API REST
    runs-on: ubuntu-latest
    # This job depends on the build job
    needs: build
    services:
      # Define a PostgreSQL service for database access
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: test_db
        ports: ["5432:5432"]
        # Health check to ensure the DB is ready before using it
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      # Run the API container in detached mode (background)
      # -d: Run container in detached mode, meaning it runs in the background without blocking the terminal
      # --name: Assign a custom name to the container for easier management (e.g., for stopping or removing it later)
      - name: Run the API container
        run: |
          docker run -d --name bowie-api-rest-container \
            ${{ env.IMAGE_NAME }} \
            bowie-api-rest -p 8000:8000

      # Wait for the API to be ready before sending requests
      - name: Wait for API to be ready
        run: sleep 5

      # Test API endpoints using curl and print the responses
      - name: Run API tests with curl
        run: |
          echo "‚òéÔ∏è Request sent:"
          echo "curl -s 'http://127.0.0.1:8000/tracks/Fa/albums'"
          response=$(curl -s 'http://127.0.0.1:8000/tracks/Fa/albums')
          echo "‚úâÔ∏è Response received:"
          echo $response | jq '.'

          echo "‚òéÔ∏è Request sent:"
          echo "curl -s 'http://127.0.0.1:8000/tracks/Fashion/albums'"
          response=$(curl -s 'http://127.0.0.1:8000/tracks/Fashion/albums')
          echo "‚úâÔ∏è Response received:"
          echo $response | jq '.'

          echo "‚òéÔ∏è Request sent:"
          echo "curl -s -G 'http://127.0.0.1:8000/albums/by-title/' --data-urlencode 'album_title=star'"
          response=$(curl -s -G 'http://127.0.0.1:8000/albums/by-title/' --data-urlencode 'album_title=star')
          echo "‚úâÔ∏è Response received:"
          echo $response | jq '.'

          echo "‚òéÔ∏è Request sent:"
          echo "curl -s -G 'http://127.0.0.1:8000/albums/by-title/' --data-urlencode 'album_title=scary monsters'"
          response=$(curl -s -G 'http://127.0.0.1:8000/albums/by-title/' --data-urlencode 'album_title=scary monsters')
          echo "‚úâÔ∏è Response received:"
          echo $response | jq '.'

          echo "‚òéÔ∏è Request sent:"
          echo "curl -s -G 'http://127.0.0.1:8000/albums/by-title/' --data-urlencode 'album_title=The Dark Side of the Moon'"
          response=$(curl -s -G 'http://127.0.0.1:8000/albums/by-title/' --data-urlencode 'album_title=The Dark Side of the Moon')
          echo "‚úâÔ∏è Response received (expected to be empty or 404):"
          echo $response | jq '.'

      # Clean up the container at the end of the job (this is done manually because it has been run in detached mode)
      # Remove the container explicitly by name at the end of the job
      # This is necessary because the container is running in detached mode
      # --name allows us to reference the container by name easily for stopping/removal
      - name: Clean up Docker container
        run: |
          docker rm -f bowie-api-rest-container || echo "Container not found or already removed."

  test:
    name: üß™ Run tests
    runs-on: ubuntu-latest
    # This job depends on the build job
    needs: build
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      - name: Run tests with PDM
        run: |
          docker run --rm \
            ${{ env.IMAGE_NAME }} \
            sh -c "pdm install -dG test && pdm test"

  doc:
    name: üìö Build and deploy Docs using Docker
    runs-on: ubuntu-latest
    needs: build  # This job depends on the build
    if: |
      github.ref == 'refs/heads/main' ||
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.base.ref == 'main' &&
        contains(github.event.pull_request.labels.*.name, 'documentation')
      )
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      - name: Build documentation with PDM
        run: |
          docker run --rm \
            ${{ env.IMAGE_NAME }} \
            sh -c "pdm install -dG doc && pdm doc"

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/build
          publish_branch: gh-pages

  lint:
    name: ü©∫ Lint source code
    runs-on: ubuntu-latest
    # This job depends on the build job
    needs: build
    steps:
      # Checkout the repository
      - uses: actions/checkout@v3

      - name: Run linting with PDM
        run: |
          docker run --rm \
            ${{ env.IMAGE_NAME }} \
            sh -c "pdm install -dG lint && pdm lint"
