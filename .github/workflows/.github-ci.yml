name: CI Pipeline

on:
  # Trigger the pipeline on push to any branch
  push:
    branches:
      - '**'  # Run on push to any branch
  # Trigger the pipeline on pull requests to any branch
  pull_request:
    branches:
      - '**'  # Run on PRs to any branch
  # Allow manual triggering of the pipeline
  workflow_dispatch:  

env:
  # The name of the Docker image to be pushed and used for testing
  IMAGE_NAME: ghcr.io/clemburt/bowie_api_rest:latest

jobs:
  # Job to build and push the Docker image to GitHub Container Registry (GHCR)
  build:
    name: 🐋 Build and Push Docker Image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3  # Checkout the repository

      # Authenticate to GitHub Container Registry
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build the Docker image (using the latest version of the base image)
      - name: Build Docker image
        run: docker build --pull -t ${{ env.IMAGE_NAME }} .

      # Push the built Docker image to GHCR
      - name: Push Docker image
        run: docker push ${{ env.IMAGE_NAME }}

  # Job to run tests inside a Docker container
  test:
    name: 🧪 Run Tests in Docker Container
    runs-on: ubuntu-latest
    needs: build  # This job depends on the build job
    steps:
      - uses: actions/checkout@v3  # Checkout the repository

      # Run tests inside the Docker container using the PDM script (defined in pyproject.toml)
      - name: Run tests with PDM inside container
        env:
          TMDB_API_KEY: ${{ secrets.TMDB_API_KEY }}  # Use secret API key
        run: |
          docker run --rm \
            -e TMDB_API_KEY="${{ secrets.TMDB_API_KEY }}" \
            ${{ env.IMAGE_NAME }} \
            pdm test  # Run tests

  # Job to launch the API REST container and test the API endpoints
  api-rest:
    name: 🖥️ Launch API REST
    runs-on: ubuntu-latest
    needs: build  # This job also depends on the build job
    services:
      # Define a PostgreSQL service that will be used by the app for database access during testing
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: pass
          POSTGRES_DB: test_db  # Database name for testing
        ports: ["5432:5432"]
        options: >-
          --health-cmd "pg_isready -U postgres"  # Health check to wait until the DB is ready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v3  # Checkout the repository

      # Set up Python environment (needed for pdm installation)
      - uses: actions/setup-python@v4
        with:
          python-version: 3.11  # Use Python version 3.11

      # Build the Docker image from the Dockerfile
      - name: Build Docker image
        run: docker build -t bowie-api-rest .

      # Run the API container in detached mode (background)
      - name: Run the API container
        run: |
          docker run -d --name bowie-api-rest -p 8000:8000 bowie-api-rest  # Run the API on port 8000

      # Test API endpoints using curl
      - name: Run API tests with curl
        run: |
          # Wait for the API to be ready before sending curl requests
          sleep 5
          
          # Test track search for "Fa"
          response=$(curl -s -o /dev/null -w "%{http_code}" 'http://127.0.0.1:8000/tracks/Fa/albums')
          echo "Response for /tracks/Fa/albums: $response"
          if [ "$response" -ne 200 ]; then exit 1; fi
          
          # Test track search for "Fashion"
          response=$(curl -s -o /dev/null -w "%{http_code}" 'http://127.0.0.1:8000/tracks/Fashion/albums')
          echo "Response for /tracks/Fashion/albums: $response"
          if [ "$response" -ne 200 ]; then exit 1; fi
          
          # Test album search for "scary monsters"
          response=$(curl -s -o /dev/null -w "%{http_code}" -G "http://127.0.0.1:8000/albums/by-title/" --data-urlencode "album_title=scary monsters")
          echo "Response for /albums/by-title/?album_title=scary monsters: $response"
          if [ "$response" -ne 200 ]; then exit 1; fi

      # Optionally, stop and clean up the Docker container after tests
      - name: Stop Docker container
        run: docker stop bowie-api-rest

  # Job to build and deploy the documentation
  doc:
    name: 📚 Build and Deploy Docs
    runs-on: ubuntu-latest
    needs: build  # This job depends on the build job
    if: |
      github.ref == 'refs/heads/main' ||  # Run this job only on the main branch or PRs to main
      (
        github.event_name == 'pull_request' &&
        github.event.pull_request.base.ref == 'main' &&
        contains(github.event.pull_request.labels.*.name, 'documentation')
      )
    steps:
      - uses: actions/checkout@v3  # Checkout the repository

      # Set up Python environment for documentation generation
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      # Install PDM
      - name: Install PDM
        run: |
          curl -sSL https://pdm-project.org/install-pdm.py | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      # Install documentation dependencies
      - name: Install doc dependencies
        run: pdm install -G doc

      # Build the documentation using PDM
      - name: Build documentation
        run: pdm doc

      # Deploy the documentation to GitHub Pages
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: docs/build
          publish_branch: gh-pages
